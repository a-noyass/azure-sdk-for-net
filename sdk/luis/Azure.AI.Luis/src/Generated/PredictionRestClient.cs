// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.AI.Luis.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.Luis
{
    internal partial class PredictionRestClient
    {
        private string endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of PredictionRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public PredictionRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string endpoint)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetVersionPredictionGETRequest(Guid appId, string versionId, string query, bool? verbose, bool? showAllIntents, bool? log)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/luis/prediction/v3.0", false);
            uri.AppendPath("/apps/", false);
            uri.AppendPath(appId, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionId, true);
            uri.AppendPath("/predict", false);
            uri.AppendQuery("query", query, true);
            if (verbose != null)
            {
                uri.AppendQuery("verbose", verbose.Value, true);
            }
            if (showAllIntents != null)
            {
                uri.AppendQuery("show-all-intents", showAllIntents.Value, true);
            }
            if (log != null)
            {
                uri.AppendQuery("log", log.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the predictions for an application version. </summary>
        /// <param name="appId"> The application ID. </param>
        /// <param name="versionId"> The application version ID. </param>
        /// <param name="query"> The query to predict. </param>
        /// <param name="verbose"> Indicates whether to get extra metadata for the entities predictions or not. </param>
        /// <param name="showAllIntents"> Indicates whether to return all the intents in the response or just the top intent. </param>
        /// <param name="log"> Indicates whether to log the endpoint query or not. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionId"/> or <paramref name="query"/> is null. </exception>
        public async Task<Response<PredictionResponse>> GetVersionPredictionGETAsync(Guid appId, string versionId, string query, bool? verbose = null, bool? showAllIntents = null, bool? log = null, CancellationToken cancellationToken = default)
        {
            if (versionId == null)
            {
                throw new ArgumentNullException(nameof(versionId));
            }
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetVersionPredictionGETRequest(appId, versionId, query, verbose, showAllIntents, log);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PredictionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PredictionResponse.DeserializePredictionResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the predictions for an application version. </summary>
        /// <param name="appId"> The application ID. </param>
        /// <param name="versionId"> The application version ID. </param>
        /// <param name="query"> The query to predict. </param>
        /// <param name="verbose"> Indicates whether to get extra metadata for the entities predictions or not. </param>
        /// <param name="showAllIntents"> Indicates whether to return all the intents in the response or just the top intent. </param>
        /// <param name="log"> Indicates whether to log the endpoint query or not. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionId"/> or <paramref name="query"/> is null. </exception>
        public Response<PredictionResponse> GetVersionPredictionGET(Guid appId, string versionId, string query, bool? verbose = null, bool? showAllIntents = null, bool? log = null, CancellationToken cancellationToken = default)
        {
            if (versionId == null)
            {
                throw new ArgumentNullException(nameof(versionId));
            }
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetVersionPredictionGETRequest(appId, versionId, query, verbose, showAllIntents, log);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PredictionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PredictionResponse.DeserializePredictionResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetVersionPredictionRequest(Guid appId, string versionId, PredictionRequest predictionRequest, bool? verbose, bool? showAllIntents, bool? log)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/luis/prediction/v3.0", false);
            uri.AppendPath("/apps/", false);
            uri.AppendPath(appId, true);
            uri.AppendPath("/versions/", false);
            uri.AppendPath(versionId, true);
            uri.AppendPath("/predict", false);
            if (verbose != null)
            {
                uri.AppendQuery("verbose", verbose.Value, true);
            }
            if (showAllIntents != null)
            {
                uri.AppendQuery("show-all-intents", showAllIntents.Value, true);
            }
            if (log != null)
            {
                uri.AppendQuery("log", log.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(predictionRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Gets the predictions for an application version. </summary>
        /// <param name="appId"> The application ID. </param>
        /// <param name="versionId"> The application version ID. </param>
        /// <param name="predictionRequest"> The prediction request parameters. </param>
        /// <param name="verbose"> Indicates whether to get extra metadata for the entities predictions or not. </param>
        /// <param name="showAllIntents"> Indicates whether to return all the intents in the response or just the top intent. </param>
        /// <param name="log"> Indicates whether to log the endpoint query or not. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionId"/> or <paramref name="predictionRequest"/> is null. </exception>
        public async Task<Response<PredictionResponse>> GetVersionPredictionAsync(Guid appId, string versionId, PredictionRequest predictionRequest, bool? verbose = null, bool? showAllIntents = null, bool? log = null, CancellationToken cancellationToken = default)
        {
            if (versionId == null)
            {
                throw new ArgumentNullException(nameof(versionId));
            }
            if (predictionRequest == null)
            {
                throw new ArgumentNullException(nameof(predictionRequest));
            }

            using var message = CreateGetVersionPredictionRequest(appId, versionId, predictionRequest, verbose, showAllIntents, log);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PredictionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PredictionResponse.DeserializePredictionResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the predictions for an application version. </summary>
        /// <param name="appId"> The application ID. </param>
        /// <param name="versionId"> The application version ID. </param>
        /// <param name="predictionRequest"> The prediction request parameters. </param>
        /// <param name="verbose"> Indicates whether to get extra metadata for the entities predictions or not. </param>
        /// <param name="showAllIntents"> Indicates whether to return all the intents in the response or just the top intent. </param>
        /// <param name="log"> Indicates whether to log the endpoint query or not. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="versionId"/> or <paramref name="predictionRequest"/> is null. </exception>
        public Response<PredictionResponse> GetVersionPrediction(Guid appId, string versionId, PredictionRequest predictionRequest, bool? verbose = null, bool? showAllIntents = null, bool? log = null, CancellationToken cancellationToken = default)
        {
            if (versionId == null)
            {
                throw new ArgumentNullException(nameof(versionId));
            }
            if (predictionRequest == null)
            {
                throw new ArgumentNullException(nameof(predictionRequest));
            }

            using var message = CreateGetVersionPredictionRequest(appId, versionId, predictionRequest, verbose, showAllIntents, log);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PredictionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PredictionResponse.DeserializePredictionResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSlotPredictionGETRequest(Guid appId, string slotName, string query, bool? verbose, bool? showAllIntents, bool? log)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/luis/prediction/v3.0", false);
            uri.AppendPath("/apps/", false);
            uri.AppendPath(appId, true);
            uri.AppendPath("/slots/", false);
            uri.AppendPath(slotName, true);
            uri.AppendPath("/predict", false);
            uri.AppendQuery("query", query, true);
            if (verbose != null)
            {
                uri.AppendQuery("verbose", verbose.Value, true);
            }
            if (showAllIntents != null)
            {
                uri.AppendQuery("show-all-intents", showAllIntents.Value, true);
            }
            if (log != null)
            {
                uri.AppendQuery("log", log.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the predictions for an application slot. </summary>
        /// <param name="appId"> The application ID. </param>
        /// <param name="slotName"> The application slot name. </param>
        /// <param name="query"> The query to predict. </param>
        /// <param name="verbose"> Indicates whether to get extra metadata for the entities predictions or not. </param>
        /// <param name="showAllIntents"> Indicates whether to return all the intents in the response or just the top intent. </param>
        /// <param name="log"> Indicates whether to log the endpoint query or not. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="slotName"/> or <paramref name="query"/> is null. </exception>
        public async Task<Response<PredictionResponse>> GetSlotPredictionGETAsync(Guid appId, string slotName, string query, bool? verbose = null, bool? showAllIntents = null, bool? log = null, CancellationToken cancellationToken = default)
        {
            if (slotName == null)
            {
                throw new ArgumentNullException(nameof(slotName));
            }
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetSlotPredictionGETRequest(appId, slotName, query, verbose, showAllIntents, log);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PredictionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PredictionResponse.DeserializePredictionResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the predictions for an application slot. </summary>
        /// <param name="appId"> The application ID. </param>
        /// <param name="slotName"> The application slot name. </param>
        /// <param name="query"> The query to predict. </param>
        /// <param name="verbose"> Indicates whether to get extra metadata for the entities predictions or not. </param>
        /// <param name="showAllIntents"> Indicates whether to return all the intents in the response or just the top intent. </param>
        /// <param name="log"> Indicates whether to log the endpoint query or not. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="slotName"/> or <paramref name="query"/> is null. </exception>
        public Response<PredictionResponse> GetSlotPredictionGET(Guid appId, string slotName, string query, bool? verbose = null, bool? showAllIntents = null, bool? log = null, CancellationToken cancellationToken = default)
        {
            if (slotName == null)
            {
                throw new ArgumentNullException(nameof(slotName));
            }
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetSlotPredictionGETRequest(appId, slotName, query, verbose, showAllIntents, log);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PredictionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PredictionResponse.DeserializePredictionResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetSlotPredictionRequest(Guid appId, string slotName, PredictionRequest predictionRequest, bool? verbose, bool? showAllIntents, bool? log)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(endpoint, false);
            uri.AppendRaw("/luis/prediction/v3.0", false);
            uri.AppendPath("/apps/", false);
            uri.AppendPath(appId, true);
            uri.AppendPath("/slots/", false);
            uri.AppendPath(slotName, true);
            uri.AppendPath("/predict", false);
            if (verbose != null)
            {
                uri.AppendQuery("verbose", verbose.Value, true);
            }
            if (showAllIntents != null)
            {
                uri.AppendQuery("show-all-intents", showAllIntents.Value, true);
            }
            if (log != null)
            {
                uri.AppendQuery("log", log.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(predictionRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Gets the predictions for an application slot. </summary>
        /// <param name="appId"> The application ID. </param>
        /// <param name="slotName"> The application slot name. </param>
        /// <param name="predictionRequest"> The prediction request parameters. </param>
        /// <param name="verbose"> Indicates whether to get extra metadata for the entities predictions or not. </param>
        /// <param name="showAllIntents"> Indicates whether to return all the intents in the response or just the top intent. </param>
        /// <param name="log"> Indicates whether to log the endpoint query or not. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="slotName"/> or <paramref name="predictionRequest"/> is null. </exception>
        public async Task<Response<PredictionResponse>> GetSlotPredictionAsync(Guid appId, string slotName, PredictionRequest predictionRequest, bool? verbose = null, bool? showAllIntents = null, bool? log = null, CancellationToken cancellationToken = default)
        {
            if (slotName == null)
            {
                throw new ArgumentNullException(nameof(slotName));
            }
            if (predictionRequest == null)
            {
                throw new ArgumentNullException(nameof(predictionRequest));
            }

            using var message = CreateGetSlotPredictionRequest(appId, slotName, predictionRequest, verbose, showAllIntents, log);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PredictionResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PredictionResponse.DeserializePredictionResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the predictions for an application slot. </summary>
        /// <param name="appId"> The application ID. </param>
        /// <param name="slotName"> The application slot name. </param>
        /// <param name="predictionRequest"> The prediction request parameters. </param>
        /// <param name="verbose"> Indicates whether to get extra metadata for the entities predictions or not. </param>
        /// <param name="showAllIntents"> Indicates whether to return all the intents in the response or just the top intent. </param>
        /// <param name="log"> Indicates whether to log the endpoint query or not. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="slotName"/> or <paramref name="predictionRequest"/> is null. </exception>
        public Response<PredictionResponse> GetSlotPrediction(Guid appId, string slotName, PredictionRequest predictionRequest, bool? verbose = null, bool? showAllIntents = null, bool? log = null, CancellationToken cancellationToken = default)
        {
            if (slotName == null)
            {
                throw new ArgumentNullException(nameof(slotName));
            }
            if (predictionRequest == null)
            {
                throw new ArgumentNullException(nameof(predictionRequest));
            }

            using var message = CreateGetSlotPredictionRequest(appId, slotName, predictionRequest, verbose, showAllIntents, log);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PredictionResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PredictionResponse.DeserializePredictionResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
