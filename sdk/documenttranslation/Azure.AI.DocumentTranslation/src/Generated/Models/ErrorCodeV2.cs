// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.DocumentTranslation.Models
{
    /// <summary> Enums containing high level error codes. </summary>
    public readonly partial struct ErrorCodeV2 : IEquatable<ErrorCodeV2>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ErrorCodeV2"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ErrorCodeV2(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidRequestValue = "InvalidRequest";
        private const string InvalidArgumentValue = "InvalidArgument";
        private const string InternalServerErrorValue = "InternalServerError";
        private const string ServiceUnavailableValue = "ServiceUnavailable";
        private const string ResourceNotFoundValue = "ResourceNotFound";
        private const string UnauthorizedValue = "Unauthorized";
        private const string RequestRateTooHighValue = "RequestRateTooHigh";

        /// <summary> InvalidRequest. </summary>
        public static ErrorCodeV2 InvalidRequest { get; } = new ErrorCodeV2(InvalidRequestValue);
        /// <summary> InvalidArgument. </summary>
        public static ErrorCodeV2 InvalidArgument { get; } = new ErrorCodeV2(InvalidArgumentValue);
        /// <summary> InternalServerError. </summary>
        public static ErrorCodeV2 InternalServerError { get; } = new ErrorCodeV2(InternalServerErrorValue);
        /// <summary> ServiceUnavailable. </summary>
        public static ErrorCodeV2 ServiceUnavailable { get; } = new ErrorCodeV2(ServiceUnavailableValue);
        /// <summary> ResourceNotFound. </summary>
        public static ErrorCodeV2 ResourceNotFound { get; } = new ErrorCodeV2(ResourceNotFoundValue);
        /// <summary> Unauthorized. </summary>
        public static ErrorCodeV2 Unauthorized { get; } = new ErrorCodeV2(UnauthorizedValue);
        /// <summary> RequestRateTooHigh. </summary>
        public static ErrorCodeV2 RequestRateTooHigh { get; } = new ErrorCodeV2(RequestRateTooHighValue);
        /// <summary> Determines if two <see cref="ErrorCodeV2"/> values are the same. </summary>
        public static bool operator ==(ErrorCodeV2 left, ErrorCodeV2 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ErrorCodeV2"/> values are not the same. </summary>
        public static bool operator !=(ErrorCodeV2 left, ErrorCodeV2 right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ErrorCodeV2"/>. </summary>
        public static implicit operator ErrorCodeV2(string value) => new ErrorCodeV2(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ErrorCodeV2 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ErrorCodeV2 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
